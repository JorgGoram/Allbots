Act as a senior full-stack engineer and prompt specialist within Replit Agent or Assistant.
You will take an existing landing page that currently lives inside the user dashboard, extract it into its own entry-point at /, and then build out a full user onboarding flow backed by a SQL database. Follow this step-by-step workflow, file by file, and do not proceed until each step is fully reviewed and confirmed correct:

1. Project Restructure & Landing Page Extraction

Create or designate a new index.html (or /pages/index.jsx) as the public landing page.

Move all landing-page markup, styles, and assets from the dashboard into this new entry point.

Update your routing configuration so / serves the landing page, and /dashboard serves the existing dashboard.

Ensure all relative asset and stylesheet paths are updated accordingly.

2. Database Setup

Add a new SQL database (PostgreSQL/MySQL/SQLite) to the Replit project.

Create a users table with columns:

sql
Copier
Modifier
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
Configure your environment to store DB credentials via Replit Secrets.

3. Authentication Pages

Build Sign Up page at /signup:

Form fields: Email, Password, Confirm Password.

Validate inputs client-side and server-side.

On success, hash password (e.g., bcrypt), insert into users, then redirect to /onboarding.

Build Log In page at /login:

Form fields: Email, Password.

Authenticate against users table; on success set a session or JWT, then redirect to /onboarding if first login, else to /dashboard.

4. Onboarding Multi-Step Form

Mount a wizard at /onboarding with steps:

Business Details

Business Name (required)

Business URL

Phone Number

Industry (dropdown with the provided list)

Specialty/Focus

Point of Contact

Full Name

Contact Email

Contact Phone

Timezone (dropdown)

Additional Notes (optional)

AI Agent Branding

Agent Name

Brand Voice Style (radio)

Personality Traits (checkboxes)

Voice & Language Settings

Voice Type, Accent, Speaking Pace (selects)

Primary Language, Additional Languages (multi-select)

Industry Terminology (textarea)

Knowledge Base Sources

Website URLs (list)

Document uploads (PDF/text)

Custom FAQs (upload)

Assistant Type & Settings

Inbound vs Outbound flows with their specific fields

Review & Submit

Show a summary of all entered data for confirmation

After each step’s “Next,” validate and save that step’s data to a new profiles table linked to users(id).

Only on final “Submit” of onboarding, mark users.onboarded = TRUE and redirect to /dashboard.

5. Dashboard Integration

Modify /dashboard to read from the joined users + profiles tables.

Display business name, agent settings, and a link to edit profile.

General Requirements & Constraints

Use server-side rendering or client-side routing consistently (e.g., Next.js, Express + EJS, or plain JS + Fetch).

Protect all routes: only authenticated users can access /onboarding and /dashboard.

Sanitize and validate all user inputs to prevent SQL injection or XSS.

Keep styling consistent with the original dashboard’s design system.

Create Git commits per major step (restructure, DB schema, auth pages, each form step, dashboard update) with clear commit messages.

Output & Documentation

Return only code diffs/patches in code blocks for each change.

After each file or schema update, provide a markdown summary:

bash
Copier
Modifier
### Changes in <filename or step>
- [Summary of what was moved/added/changed]
- [Why it was done]
Do not move on until you’ve confirmed the previous step works end-to-end.

Begin by extracting the existing landing-page markup into /index.html (or /pages/index.jsx) and updating routing accordingly. Take your time to verify asset paths and styling before committing.